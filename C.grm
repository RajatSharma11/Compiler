%%


%verbose
%pure

%term
  EOF 
  | ID of string
  | INT of int
  | COMMA | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK
  | LBRACE | RBRACE
  | PLUS | MINUS | TIMES | DIVIDE 
  | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | IF | ELSE 
  | WHILE | BREAK | CONTINUE| FOR| RETURN| VAR
  | PRINTF | SCANF

%nonterm
  EXPRESSION of Ast.Expression
  |STATEMENT of Ast.Statement
  |STATEMENTS of Ast.Statement list
  |CODE of Ast.Statement list

%eop EOF
%noshift EOF

%name C
%keyword WHILE BREAK IF ELSE CONTINUE PRINTF SCANF

%nonassoc ASSIGN
%left AND OR
%nonassoc EQ NEQ LT GT LE GE
%left PLUS MINUS
%left TIMES DIVIDE

%pos int

%%

CODE : STATEMENTS        (STATEMENTS)

STATEMENTS : STATEMENT    ([STATEMENT])
           | STATEMENT  STATEMENTS (STATEMENT :: STATEMENTS)
STATEMENT : ID SEMICOLON	(Ast.Int(ID))
	  | ID ASSIGN EXPRESSION SEMICOLON	(Ast.Assignment (ID,EXPRESSION))
	  | ID ASSIGN ID SEMICOLON 		(Ast.Assign (ID,ID))
          | IF LPAREN EXPRESSION RPAREN LBRACE STATEMENT RBRACE	( Ast.If (EXPRESSION,STATEMENT) )
          | IF LPAREN EXPRESSION RPAREN LBRACE STATEMENT RBRACE ELSE LBRACE STATEMENT RBRACE	( Ast.IfElse  (EXPRESSION,STATEMENT1,STATEMENT2) )
          | WHILE LPAREN EXPRESSION RPAREN LBRACE STATEMENT RBRACE	( Ast.While (EXPRESSION,STATEMENT))
	  | SCANF LPAREN ID RPAREN SEMICOLON			(Ast.Scanf(ID))
	  | PRINTF LPAREN ID RPAREN SEMICOLON			(Ast.Printf(ID))

EXPRESSION : INT		(Ast.Const INT)
           | EXPRESSION PLUS EXPRESSION	(Ast.plus EXPRESSION1 EXPRESSION2)
           | EXPRESSION MINUS EXPRESSION	(Ast.minus EXPRESSION1 EXPRESSION2)
           | EXPRESSION TIMES EXPRESSION	(Ast.mul EXPRESSION1 EXPRESSION2)
           | EXPRESSION DIVIDE EXPRESSION	(Ast.divi EXPRESSION1 EXPRESSION2)










