%%

%eop EOF
%verbose
%pure

%term
  EOF 
  | ID of string
  | INT of int | STRING of string 
  | COMMA | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK 
  | LBRACE | RBRACE
  | PLUS | MINUS | TIMES | DIVIDE 
  | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | IF | ELSE 
  | WHILE | BREAK | CONTINUE
  | NEWLINE | PRINTF | SCANF

%nonterm
  EXPRESSION of Ast.Expression
  |STATEMENT of Ast.Statement
  |STATEMENTS of Ast.Statement list
  |CODE of Ast.Statement list


%name C
%keyword WHILE BREAK IF ELSE CONTINUE PRINTF SCANF
%value ID ("bogus") 
%value INT (1)
%value STRING ("")

%nonassoc ASSIGN
%left AND OR
%nonassoc EQ NEQ LT GT LE GE
%left PLUS MINUS
%left TIMES DIVIDE

%pos int

%%

CODE : STATEMENTS        (STATEMENTS)
     | STATEMENTS EOF	 (STATEMENTS) 

STATEMENTS : STATEMENT NEWLINE STATEMENTS (STATEMENT :: STATEMENTS)

STATEMENT : ID SEMICOLON	(Ast.Int(ID))
	  | ID ASSIGN EXPRESSION SEMICOLON	(Ast.Assignment (ID,EXPRESSION))
          | IF LPAREN EXPRESSION RPAREN NEWLINE STATEMENT SEMICOLON	( Ast.If (EXPRESSION,STATEMENT) )
          | IF LPAREN EXPRESSION RPAREN NEWLINE STATEMENT SEMICOLON NEWLINE ELSE NEWLINE STATEMENT SEMICOLON	( Ast.IfElse  (EXPRESSION,STATEMENT1,STATEMENT2) )
          | WHILE LPAREN EXPRESSION RPAREN NEWLINE STATEMENT SEMICOLON	( Ast.While (EXPRESSION,STATEMENT))

EXPRESSION : INT		(Ast.Int Int)
           | EXPRESSION PLUS EXPRESSION	(Ast.plus EXPRESSION1 EXPRESSION2)
           | EXPRESSION MINUS EXPRESSION	(Ast.minus EXPRESSION1 EXPRESSION2)
           | EXPRESSION TIMES EXPRESSION	(Ast.mul EXPRESSION1 EXPRESSION2)
           | EXPRESSION DIVIDE EXPRESSION	(Ast.div EXPRESSION1 EXPRESSION2)










